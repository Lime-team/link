import asyncio

import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from filters.chat_type import ChatTypeFilter
from filters.cmd import MessageFilter

from config_reader import config

logging.basicConfig(level=logging.ERROR)

bot = Bot(token=config.bot_token.get_secret_value())

dp = Dispatcher()


@dp.message(F.text, ChatTypeFilter('private'))
async def cmd_start(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å –º–µ–Ω—è —Ç—É–¥–∞ '
                        '—Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –Ω–∞–ø–∏—à–∏ !–ø–æ–º–æ—â—å')


# @dp.message_text(F.text, ChatTypeFilter(['group', 'supergroup']))
# async def cmd_help(message_text: types.Message):
#     await message_text.reply()


@dp.message(F.text, ChatTypeFilter(['group', 'supergroup']), MessageFilter(['–Ω–∞–ø–∏—Å–∞—Ç—å', '–ù–∞–ø–∏—Å–∞—Ç—å',
                                                                            '!write', '!send', '/write',
                                                                            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '!–Ω–∞–ø–∏—Å–∞—Ç—å', '!–ù–∞–ø–∏—Å–∞—Ç—å']))
async def cmd_write(message: types.Message):
    if len(message.text.split()) > 1:
        await message.answer(" ".join(message.text.split()[1:]))
    else:
        await message.reply("–û—à–∏–±–∫–∞! \n–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç!")


@dp.message(F.text, ChatTypeFilter(['group', 'supergroup']), MessageFilter(['–º—É—Ç', '–ú—É—Ç', '–ó–∞–º—É—Ç–∏—Ç—å', '–∑–∞–º—É—Ç–∏—Ç—å',
                                                                            '!mute', '/mute', '-–≥–æ–ª–æ—Å']))
async def cmd_mute(message: types.Message):
    name1 = message.from_user.mention_html()
    if not message.reply_to_message:
        await message.reply('–û—à–∏–±–∫–∞! –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è!')
        return
    try:
        mute_int = int(message.text.split()[1])
        mute_type = message.text.split()[2]
        reason = " ".join(message.text.split()[3:])
        repl = f'üì¢ ü§ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ª–∏—à—ë–Ω –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞ –Ω–∞ {mute_int} {mute_type} ‚è∞. \nüôÑ –ù–∞–∫–∞–∑–∞–ª: {name1}. \n‚ùì –ü—Ä–∏—á–∏–Ω–∞: {reason}'
    except IndexError:
        await message.reply('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!\n–ü—Ä–∏–º–µ—Ä:\n`/–º—É—Ç 1 —á —Å–ø–∞–º')
        return
    if mute_type == "—á" or mute_type == "—á–∞—Å–æ–≤" or mute_type == "—á–∞—Å" or mute_type == "—á–∞—Å–∞":
        dt = datetime.now() + timedelta(hours=mute_int)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                       types.ChatPermissions(can_send_messages=False), until_date=timestamp)
        await message.reply(repl, parse_mode='html')
    elif mute_type == "–º" or mute_type == "–º–∏–Ω" or mute_type == "–º–∏–Ω—É—Ç" or mute_type == "–º–∏–Ω—É—Ç—ã":
        dt = datetime.now() + timedelta(minutes=mute_int)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                       types.ChatPermissions(can_send_messages=False), until_date=timestamp)
        await message.reply(repl, parse_mode='html')
    elif mute_type == "–¥" or mute_type == "–¥–Ω–µ–π" or mute_type == "–¥–µ–Ω—å" or mute_type == "–¥–Ω—è":
        dt = datetime.now() + timedelta(days=mute_int)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                       types.ChatPermissions(can_send_messages=False), until_date=timestamp)
        await message.reply(repl, parse_mode='html')
    elif mute_type == "–Ω" or mute_type == "–Ω–µ–¥" or mute_type == "–Ω–µ–¥–µ–ª—è" or mute_type == "–Ω–µ–¥–µ–ª–∏" or mute_type == "–Ω–µ–¥–µ–ª—å":
        dt = datetime.now() + timedelta(weeks=mute_int)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                       types.ChatPermissions(can_send_messages=False), until_date=timestamp)
        await message.reply(repl, parse_mode='html')


@dp.message(F.text, ChatTypeFilter(['group', 'supergroup']), MessageFilter(['—Ä–∞–∑–º—É—Ç', '–†–∞–∑–º—É—Ç', '–†–∞–∑–º—É—Ç–∏—Ç—å', '—Ä–∞–∑–º—É—Ç–∏—Ç—å',
                                                                            '!unmute', '/unmute', '+–≥–æ–ª–æ—Å']))
async def cmd_unmute(message: types.Message):
    if not message.reply_to_message:
        await message.reply('–û—à–∏–±–∫–∞! –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è!')
        return
    await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                   types.ChatPermissions(can_send_messages=True))
    await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω! üòÉ")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
